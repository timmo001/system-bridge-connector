---
name: "Deploy"

# yamllint disable-line rule:truthy
on:
  release:
    types:
      - published
  workflow_dispatch:

env:
  MODULE_NAME: systembridgeconnector

jobs:
  deploy:
    name: 🚀 Linux - Deploy Module
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4.1.7
        with:
          ref: "master"
          token: ${{ secrets.PUSH_TOKEN }}
      - name: 🏗 Set up Python
        uses: actions/setup-python@v5.1.1
        with:
          python-version: "3.12"
          architecture: "x64"
          cache: "pip"
      - name: 🏗 Install build tooling
        run: |
          python -m pip install --upgrade setuptools wheel twine
      - name: 🔢 Get old version
        id: get-version-old
        run: |
          result=$(python <<'PY'
import pathlib, re
v = re.search(r'version="([^"]+)"', pathlib.Path('setup.py').read_text(encoding='utf-8')).group(1)
print(v)
PY
          )
          echo "version=$result" >> $GITHUB_OUTPUT
      - name: 🔢 Set correct version - Development
        if: ${{ github.event_name != 'release' }}
        run: |
          # Ensure dev suffix in setup.py version
          python <<'PY'
import pathlib, re
p = pathlib.Path('setup.py')
s = p.read_text(encoding='utf-8')
m = re.search(r'version="([^"]+)"', s)
if not m:
    raise SystemExit('version field not found in setup.py')
v = m.group(1)
if 'dev' not in v:
    new_v = f"{v}.dev0"
    s = re.sub(r'version="([^"]+)"', f'"version="{new_v}"', s, count=1)
    p.write_text(s, encoding='utf-8')
    print(f'Updated version to {new_v}')
else:
    print('Version already has dev suffix, no change')
PY
      - name: 🔢 Set correct version - Release
        if: ${{ github.event_name == 'release' }}
        run: |
          # Strip dev suffix from setup.py version
          python <<'PY'
import pathlib, re
p = pathlib.Path('setup.py')
s = p.read_text(encoding='utf-8')
m = re.search(r'version="([^"]+)"', s)
if not m:
    raise SystemExit('version field not found in setup.py')
v = m.group(1)
new_v = re.sub(r'\.dev\d*$', '', v)
if new_v != v:
    s = s.replace(f'version="{v}"', f'version="{new_v}"', 1)
    p.write_text(s, encoding='utf-8')
    print(f'Updated version to {new_v}')
else:
    print('No dev suffix to strip')
PY
      - name: 🔢 Get current version
        id: get-version-current
        run: |
          result=$(python <<'PY'
import pathlib, re
v = re.search(r'version="([^"]+)"', pathlib.Path('setup.py').read_text(encoding='utf-8')).group(1)
print(v)
PY
          )
          echo "version=$result" >> $GITHUB_OUTPUT
      - name: ⤵️ Pull latest changes from GitHub
        run: |
          git pull --ff
      - name: 🖊 Commit
        uses: stefanzweifel/git-auto-commit-action@v5.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.PUSH_TOKEN }}
        with:
          commit_message: |
            Bump ${{ env.MODULE_NAME }} version to ${{ steps.get-version-current.outputs.version }}
      - name: 🏗 Build distributions
        run: |
          python setup.py sdist bdist_wheel
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
      - name: 🔢 Increment version - Development
        if: ${{ github.event_name != 'release' }}
        run: |
          # Bump dev serial (X.Y.Z.devN -> X.Y.Z.devN+1); if no dev, bump patch and add .dev0
          python <<'PY'
import pathlib, re
p = pathlib.Path('setup.py')
s = p.read_text(encoding='utf-8')
m = re.search(r'version="([^"]+)"', s)
if not m:
    raise SystemExit('version field not found in setup.py')
v = m.group(1)
dev_m = re.search(r'^(\d+)\.(\d+)\.(\d+)(?:\.dev(\d+))?$', v)
if not dev_m:
    raise SystemExit(f'Unexpected version format: {v}')
major, minor, patch, dev = dev_m.groups()
if dev is None:
    # bump patch, add dev0
    new_v = f"{major}.{minor}.{int(patch)+1}.dev0"
else:
    new_v = f"{major}.{minor}.{patch}.dev{int(dev)+1}"
s = s.replace(f'version="{v}"', f'version="{new_v}"', 1)
p.write_text(s, encoding='utf-8')
print(f'Updated version to {new_v}')
PY
      - name: 🔢 Increment version - Release
        if: ${{ github.event_name == 'release' }}
        run: |
          # Bump patch and set to next development cycle (X.Y.Z -> X.Y.(Z+1).dev0)
          python <<'PY'
import pathlib, re
p = pathlib.Path('setup.py')
s = p.read_text(encoding='utf-8')
m = re.search(r'version="([^"]+)"', s)
if not m:
    raise SystemExit('version field not found in setup.py')
v = m.group(1)
base = re.sub(r'\.dev\d*$', '', v)
m2 = re.fullmatch(r'^(\d+)\.(\d+)\.(\d+)$', base)
if not m2:
    raise SystemExit(f'Unexpected base version format: {base}')
major, minor, patch = m2.groups()
new_v = f"{major}.{minor}.{int(patch)+1}.dev0"
s = s.replace(f'version="{v}"', f'version="{new_v}"', 1)
p.write_text(s, encoding='utf-8')
print(f'Updated version to {new_v}')
PY
      - name: 🔢 Get new version
        id: get-version-new
        run: |
          result=$(python <<'PY'
import pathlib, re
v = re.search(r'version="([^"]+)"', pathlib.Path('setup.py').read_text(encoding='utf-8')).group(1)
print(v)
PY
          )
          echo "version=$result" >> $GITHUB_OUTPUT
      - name: ⤵️ Pull latest changes from GitHub
        run: |
          git pull --ff
      - name: 🖊 Commit
        uses: stefanzweifel/git-auto-commit-action@v5.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.PUSH_TOKEN }}
        with:
          commit_message: |
            Bump ${{ env.MODULE_NAME }} version to ${{ steps.get-version-new.outputs.version }}
